name: Tests

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main]
  schedule:
    - cron: "0 2 * * 1" # Weekly on Monday at 2 AM

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Load cached venv
        id: cached-venv-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}

      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv sync --all-extras --dev

      - name: Run unit tests
        run: |
          source .venv/bin/activate
          uv run pytest tests/test_aython.py -v --cov=aython --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # integration-tests:
  #   runs-on: ubuntu-latest
  #   needs: unit-tests

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Set up Python 3.11
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.11"

  #     - name: Install uv
  #       run: |
  #         curl -LsSf https://astral.sh/uv/install.sh | sh
  #         echo "$HOME/.cargo/bin" >> $GITHUB_PATH

  #     - name: Install dependencies
  #       run: |
  #         uv venv
  #         source .venv/bin/activate
  #         uv sync --all-extras --dev

  #     - name: Install Docker
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y docker.io docker-compose
  #         sudo systemctl start docker
  #         sudo usermod -aG docker $USER

  #     - name: Run integration tests
  #       run: |
  #         source .venv/bin/activate
  #         uv run pytest tests/test_docker_integration.py -v --timeout=300

  # end-to-end-tests:
  #   runs-on: ubuntu-latest
  #   needs: unit-tests
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Set up Python 3.11
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.11"

  #     - name: Install uv
  #       run: |
  #         curl -LsSf https://astral.sh/uv/install.sh | sh
  #         echo "$HOME/.cargo/bin" >> $GITHUB_PATH

  #     - name: Install dependencies
  #       run: |
  #         uv venv
  #         source .venv/bin/activate
  #         uv sync --all-extras --dev

  #     - name: Install Docker
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y docker.io docker-compose
  #         sudo systemctl start docker
  #         sudo usermod -aG docker $USER

  #     - name: Set up environment variables
  #       run: |
  #         echo "MODEL=gemini-1.5-flash" >> $GITHUB_ENV
  #         echo "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}" >> $GITHUB_ENV

  #     - name: Run end-to-end tests
  #       run: |
  #         source .venv/bin/activate
  #         uv run pytest tests/test_e2e.py -v --timeout=600

  lint-and-format:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv sync --all-extras --dev

      - name: Run linting
        run: |
          source .venv/bin/activate
          uv run ruff check src/ tests/ --output-format=github

      - name: Run formatting check
        run: |
          source .venv/bin/activate
          uv run ruff format --check src/ tests/

  security-scan:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv sync --all-extras --dev

      - name: Run security scan
        run: |
          source .venv/bin/activate
          uv run safety check

  docker-build-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build agent image
        run: |
          cd src/aython
          docker build -t aython-agent:test ./agent

      - name: Build magics image
        run: |
          cd src/aython
          docker build -t aython-magics:test ./magics

      - name: Test docker-compose config
        run: |
          cd src/aython
          docker-compose config

  test-summary:
    runs-on: ubuntu-latest
    needs:
      [
        unit-tests,
        integration-tests,
        lint-and-format,
        security-scan,
        docker-build-test,
      ]
    if: always()

    steps:
      - name: Test Summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Lint and Format: ${{ needs.lint-and-format.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Docker Build: ${{ needs.docker-build-test.result }}" >> $GITHUB_STEP_SUMMARY
